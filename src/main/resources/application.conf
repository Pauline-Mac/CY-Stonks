cy-stonks {
  routes {
    # If ask takes more time than this to complete the request is failed
    ask-timeout = 5s
  }
}

akka.http {
  cors {
    # Allow generic requests without Origin header
    allow-generic-http-requests = on

    # Include Access-Control-Allow-Credentials header
    allow-credentials = on

    # Origins allowed to access resources
    allowed-origins = ["*"]

    # Headers allowed in actual requests
    allowed-headers = ["*"]

    # HTTP methods allowed
    allowed-methods = ["GET", "POST", "HEAD", "OPTIONS"]

    # Headers browsers can access
    exposed-headers = []

    # Browser cache time for preflight results
    max-age = 1800 seconds
  }
}

# Persistence plugin configuration
akka.persistence.journal.plugin = "akka.persistence.r2dbc.journal"
akka.persistence.snapshot-store.plugin = "akka.persistence.r2dbc.snapshot"
akka.persistence.state.plugin = "akka.persistence.r2dbc.state"
akka.persistence.r2dbc.state.class = "akka.persistence.r2dbc.state.R2dbcDurableStateStoreProvider"

# These should be at this level, not nested
log-statements = on
log-statements-level = DEBUG

akka.persistence.r2dbc {
  connection-factory = ${akka.persistence.r2dbc.postgres}
  connection-factory {    
    host = localhost
    port = 5432
    database = "cy-stonks-db"
    user = "postgres"
    password = "postgres"
  }
  
  # Add validation query
  validation-query = "SELECT COUNT(*) FROM information_schema.tables WHERE table_name = 'durable_state_blog_post'"

  journal.payload-column-type = "jsonb"
  snapshot.payload-column-type = "jsonb"
  state.payload-column-type = "jsonb"
  
  state {
    table = "durable_state"
    schema = "public"
    data-partition-groups = 1
    additional-columns {
      "BlogPost" = ["BlogPostTitleColumn", "BlogPostJsonColumn"]
    }
    custom-table {
      "BlogPost" = "durable_state_blog_post"
    }
  }
}

akka.serialization.jackson.jackson-json.compression.algorithm = off